// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPERADMIN
  ORGANIZER
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  username       String?   @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  fullName       String?
  about          String?

  currentInstitute   Institute? @relation(fields: [currentInstituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentInstituteId String?

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  modules     Module[]
  templates   Template[]
  images      Image[]
  reports     Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Institute {
  id   String @id @default(cuid())
  name String @unique

  memberships  Membership[]
  currentUsers User[]
  modules      Module[]
  templates    Template[]
  images       Image[]
  reports      Report[]
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id   String         @id @default(cuid())
  role MembershipRole

  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instituteId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([instituteId, userId])
}

enum Visibility {
  PRIVATE
  INSTITUTE
  PUBLIC
}

enum ReleaseStatus {
  DRAFT
  PUBLISHED
  DEPRECIATED
}

model Module {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  source        String
  document      Json
  visibility    Visibility
  releaseStatus ReleaseStatus

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?

  translations ModuleTranslation[]
  categories   ModuleCategory[]

  @@unique([authorId, name])
}

model ModuleTranslation {
  id          String  @id @default(cuid())
  language    String
  default     Boolean
  title       String
  description String

  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moduleId String

  @@unique([language, moduleId])
  @@index([moduleId, default])
}

model Template {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  source        String
  document      Json
  visibility    Visibility
  releaseStatus ReleaseStatus

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?

  translations TemplateTranslation[]
  categories   TemplateCategory[]

  @@unique([authorId, name])
}

model TemplateTranslation {
  id          String  @id @default(cuid())
  language    String
  default     Boolean
  title       String
  description String

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  templateId String

  @@unique([language, templateId])
  @@index([templateId, default])
}

model Image {
  id            String        @id @default(cuid())
  name          String
  filename      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  original      String
  processed     String
  visibility    Visibility
  releaseStatus ReleaseStatus

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?

  ImageTranslation ImageTranslation[]
  ImageCategory    ImageCategory[]
}

model ImageTranslation {
  id          String  @id @default(cuid())
  language    String
  default     Boolean
  title       String
  description String

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String

  @@unique([language, imageId])
  @@index([imageId, default])
}

model ModuleCategory {
  id String @id @default(cuid())

  Module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moduleId String

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@unique([moduleId, categoryId])
}

model TemplateCategory {
  id String @id @default(cuid())

  Template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  templateId String

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@unique([templateId, categoryId])
}

model ImageCategory {
  id String @id @default(cuid())

  Image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@unique([imageId, categoryId])
}

model Category {
  id  String @id @default(cuid())
  key String @unique

  translations  CategoryTranslation[]
  modules       ModuleCategory[]
  templates     TemplateCategory[]
  ImageCategory ImageCategory[]
}

model CategoryTranslation {
  id       String @id @default(cuid())
  language String
  label    String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  @@unique([categoryId, language])
}

model Report {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  visibility Visibility

  template      Json
  structureData Json
  reportFormat  Json

  details ReportDetail[]

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?
}

model ReportDetail {
  id       String    @id @default(cuid())
  key      String
  string   String?
  dateTime DateTime?
  int      BigInt?
  float    Float?

  report   Report? @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reportId String?

  @@unique([reportId, key])
}
