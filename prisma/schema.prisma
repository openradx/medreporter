// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPERADMIN
  ORGANIZER
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  username       String?   @unique
  hashedPassword String?
  role           UserRole  @default(USER)
  fullName       String?
  about          String?

  currentInstitute   Institute? @relation(fields: [currentInstituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  currentInstituteId String?

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  resources   Resource[]
  reports     Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Institute {
  id   String @id @default(cuid())
  name String @unique

  memberships  Membership[]
  currentUsers User[]
  resources    Resource[]
  reports      Report[]
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id   String         @id @default(cuid())
  role MembershipRole

  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  instituteId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([instituteId, userId])
}

enum ResourceType {
  FIGURE
  TEMPLATE
}

enum Visibility {
  PRIVATE
  INSTITUTE
  PUBLIC
}

enum ReleaseStatus {
  DRAFT
  PUBLISHED
  DEPRECIATED
}

model Resource {
  id            String        @id @default(cuid())
  type          ResourceType
  slug          String
  locale        String
  title         String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  document      Json
  visibility    Visibility
  releaseStatus ReleaseStatus

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?

  tags ResourceTag[]

  @@unique([type, authorId, slug])
}

model ResourceTag {
  id String @id @default(cuid())

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resourceId String

  Tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String

  @@unique([resourceId, tagId])
}

model Tag {
  id    String @id @default(cuid())
  label String @unique

  resources ResourceTag[]
}

model Report {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  visibility Visibility

  frame      Json
  data       Json
  peferences Json
  properties Json

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instituteId String?
}
