// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------

model User {
  id              String    @id @default(cuid())
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  username        String
  displayUsername String
  about           String

  sessions    Session[]
  accounts    Account[]
  memberships Membership[]
  templates   Template[]
  reports     Report[]

  currentInstitute   Institute? @relation(fields: [currentInstituteId], references: [id], onDelete: SetNull)
  currentInstituteId String?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Institute {
  id   String @id @default(cuid())
  name String @unique

  memberships  Membership[]
  currentUsers User[]
  templates    Template[]
  reports      Report[]
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id   String         @id @default(cuid())
  role MembershipRole

  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([instituteId, userId])
}

enum Visibility {
  PRIVATE
  INSTITUTE
  PUBLIC
}

enum ReleaseStatus {
  DRAFT
  PUBLISHED
  DEPRECATED
}

model Template {
  id            String        @id @default(cuid())
  slug          String
  language      String
  title         String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  document      Json
  visibility    Visibility
  releaseStatus ReleaseStatus

  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull)
  instituteId String?

  categories Category[]
  Report     Report[]

  @@unique([authorId, slug])
}

model Category {
  id  String @id @default(cuid())
  key String @unique

  templates Template[]
}

model Report {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  visibility Visibility

  data        Json
  preferences Json
  properties  Json

  template    Template   @relation(fields: [templateId], references: [id], onDelete: Restrict)
  templateId  String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull)
  instituteId String?
}
